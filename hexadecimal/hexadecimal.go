// Package hexadecimal solves an Exercism challenge.
package hexadecimal

import (
	"errors"
)

// ParseHex takes a string and parses it to an int64.
func ParseHex(s string) (int64, error) {
	if s == "" {
		return 0, errors.New("syntax")
	}

	var result int64
	for _, c := range s {
		result = result << 4
		switch {
		case '0' <= c && c <= '9':
			result += int64(c - '0')
		case 'a' <= c && c <= 'f':
			result += int64(c - 'a' + 10)
		case 'A' <= c && c <= 'F':
			result += int64(c - 'A' + 10)
		default:
			return 0, errors.New("syntax")
		}
		// Check for overflow.
		if result < 0 {
			return 0, errors.New("range")
		}
	}
	return result, nil
}

// HandleErrors parses a bunch of hexadecimal numbers, and returns the errors
// generated by each.
func HandleErrors(a []string) []string {
	result := make([]string, len(a))
	for i, s := range a {
		_, err := ParseHex(s)
		if err == nil {
			result[i] = "none"
		} else {
			result[i] = err.Error()
		}
	}
	return result
}
